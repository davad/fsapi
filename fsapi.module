<?php
/** 
 * @file
 * This file provides wrapper functions around the Family Search api
 */

require_once (drupal_get_path('module', 'fsapi') . '/fsapi.oauth.inc');

/**
 * Implements hook_permission().
 */
function fsapi_permission() {
    return array(
  	    'administer_fsapi' => array(
  	        'title' => t('Administer fsapi'),
  	        'description' => t('Administer Family Search API Settings and access test pages'),
        ),
    );
}

/** 
 * Implements hook_menu()
 */
function fsapi_menu() {
    $items['admin/config/fsapi'] = array(
        'title'            => 'Family Search API Settings',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('fsapi_admin_settings'),
        'access arguments' => array('administer fsapi'),
        'file'             => 'fsapi.admin.inc',
    );
    $items['fsapi_test'] = array(
        'title'            => 'Family Search API Test',
        'page callback'    => 'fsapi_test_page',
        'access arguments' => array('administer fsapi'),
    );

    return $items;
}

/**
 * Test page for fsapi
 *
 * Build a page that tests that fsapi connects to the family search server and grabs a person object.
 */
function fsapi_test_page() {
    $page = array('#markup' => '<h1>'. t('FSAPI Test Page') . '</h1>');

    $id = arg(1);
    if(empty($id)) $id = "KW3B-NZG";
    $person = null;
    $matches = null;

    //Let's try to search by name if ID fails
    try {
        $person = fsapi_get_person($id);
    }
    catch (Exception $e) {
        $page['#markup'] .= '<p>' . t('No person found') . '</p>';
        $matches = fsapi_find_people($id);
        dpm($e, 'Exception');
    }
    
    dpm($person,'$person');
    dpm($matches,'$matches');
    dpm($id,'$id');
    
    
    if($person == null) {
        $page['#markup'] .= '<p>' . t('Searching by name:') .check_plain($id) . '</p>';

        if(!empty($matches)) {
            $page['#markup'] .= '<ul>';
            foreach($matches as $match) {
                $page['#markup'] .= '<li>'.t('Name') . " - " . $match->getPerson()->getPrimaryName()->getFullText() . '</li>';
            }
            $page['#markup'] .= '</ul>';
        }
        else {
            $page['#markup'] = '<p>' . t('Could not find'). ' <b>' . check_plain($id) . '</b></p>';
        }
    }
    else {
//        $page['#markup'] .= t('Name') . $person->getPerson()->getPrimaryName()->getFullText();
    }
    return $page;
}

/**
 * Authenticate with family search server.
 *
 * Fsapi uses the username, password, key, and server supplied in the admin settings to create a connection to the family search server.
 *
 * @return
 *  XmlGedcom object if connection is successful, ***** if connection fails
 *
 * TODO: Alter FamilySearchProxy to use the access token
 */
function fsapi_connect() {
  $access = fsapi_get_vars();
  $access_token = $access['#token'];
  dpm($access_token, 'Access Token');

  if(empty($access_token)) {
    drupal_set_message('Please have the site admin connect this site with Family Search', 'error');
    return;
  }

  require_once (drupal_get_path('module', 'fsapi') . '/PHP-FamilySearchAPI/FSParse/XMLGEDCOM.php');
  require_once (drupal_get_path('module', 'fsapi') . '/PHP-FamilySearchAPI/FSAPI/FamilySearchProxy.php');
  $xmlGed = new XmlGedcom();

  //--create a new object of FamilySearchProxy
  $proxy = new FamilySearchProxy('http://www.dev.usys.org',$access_token);

  $xmlGed->setProxy($proxy);
  return $xmlGed;
}

/**
 * Select person by id
 *
 * Connect to the family search server and retrieve a person
 *
 * @param ID of a person
 * @return XG_Person object if the server returns a result, null if not
 */
function fsapi_get_person($id) {
  $xmlGed = fsapi_connect();
  dpm($xmlGed,'$xmlGed');

  //If you can't connect
  if(empty($xmlGed)) {
    return;
  }

  $person = $xmlGed->getPerson($id, 'summary');
  return $person;
}

/**
 * Find people by name
 *
 * Given a name, look for a list of persons with that name
 *
 * @param 
 *   Full name of the person
 *
 * @return
 *  Associative array of people keyed by family search ID
 */
function fsapi_find_people($name) {
  $person = new XG_Person();
  $person->name = check_plain($name);

  $xmlGed = fsapi_connect();
  $query = $xmlGed->buildSearchQuery($person);
  $response = $xmlGed->getProxy()->getPerson($query.'&maxResults=3', false);
  $xmlGed->parseXml($response);
  dpm($xmlGed, 'find_people xmlGed');
  return $xmlGed->getMatches();
}
