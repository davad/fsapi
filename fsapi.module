<?php
/** 
 * @file
 * This file provides wrapper functions around the Family Search api
 */


/**
 * Implements hook_permission().
 */
function fsapi_permission() {
    return array(
  	    'administer_fsapi' => array(
  	        'title' => t('Administer fsapi'),
  	        'description' => t('Administer Family Search API Settings and access test pages'),
        ),
    );
}

/** 
 * Implements hook_menu()
 */
function fsapi_menu() {
    $items['admin/config/fsapi'] = array(
        'title'            => 'Family Search API Settings',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('fsapi_admin_settings'),
        'access arguments' => array('administer fsapi'),
        'file'             => 'fsapi.admin.inc',
    );
    $items['fsapi_test'] = array(
        'title'            => 'Family Search API Test',
        'page callback'    => 'fsapi_test_page',
        'access arguments' => array('administer fsapi'),
    );

    return $items;
}

/**
 * Test page for fsapi
 *
 * Build a page that tests that fsapi connects to the family search server and grabs a person object.
 */
function fsapi_test_page() {
    $page = array('#markup' => '<h1>'. t('FSAPI Test Page') . '</h1>');

    $id = arg(1);
    if(empty($id)) $id = "KW3B-NZG";
    $person = null;
    $matches = null;
    try {
        $person = fsapi_getPersonById($id);
    }
    catch (Exception $e) {
        $page['#markup'] .= '<p>' . t('No person found') . '</p>';
        $matches = fsapi_findByName($id);
    }

    dpm($person,'$person');
    dpm($matches,'$matches');
    dpm($id,'$id');
    
    
    if($person == null) {
        $page['#markup'] .= '<p>' . t('Are you trying to find a person by name?') . '</p>';

        $page['#markup'] .= '<ul>';
        foreach($matches as $match) {
            $page['#markup'] .= '<li>'.t('Name') . $match->getPerson()->getPrimaryName()->getFullText() . '</li>';
        }
        $page['#markup'] .= '</ul>';
    }
    else {
//        $page['#markup'] .= t('Name') . $person->getPerson()->getPrimaryName()->getFullText();
    }
    return $page;
}

/**
 * Authenticate with family search server.
 *
 * Fsapi uses the username, password, key, and server supplied in the admin settings to create a connection to the family search server.
 *
 * @return
 *  XmlGedcom object if connection is successful, ***** if connection fails
 */
function fsapi_connect() {
    require_once (drupal_get_path('module', 'fsapi') . '/PHP-FamilySearchAPI/FSParse/XMLGEDCOM.php');
    require_once (drupal_get_path('module', 'fsapi') . '/PHP-FamilySearchAPI/FSAPI/FamilySearchProxy.php');
    $xmlGed = new XmlGedcom();
    
    $url = 'http://www.dev.usys.org';
    $username = 'api-user-3005';
    $password = 'f6d4';
    $key = 'WCQY-7J1Q-GKVV-7DNM-SQ5M-9Q5H-JX3H-CMJK';

    //--create a new object of FamilySearchProxy
    $proxy = new FamilySearchProxy(
        $url,
        $username,
        $password,
        $key);

    $xmlGed->setProxy($proxy);
    return $xmlGed;
}

/**
 * Select person by id
 *
 * Connect to the family search server and retrieve a person
 *
 * @return XG_Person object if the server returns a result, null if not
 */
function fsapi_getPersonById($id) {
    $xmlGed = fsapi_connect();
    $person = $xmlGed->getPerson($id, 'summary');
    return $person;
}

/**
 * Find people by name
 *
 * Given a name, look for a list of persons with that name
 *
 * @param 
 *   Full name of the person
 *
 * @return
 *  Associative array of people keyed by family search ID
 *
 *  TODO: Filter $name for security
 */
function fsapi_findByName($name) {
    $person = new XG_Person();
    $person->name = $name;

    $xmlGed = fsapi_connect();
    $query = $xmlGed->buildSearchQuery($person);
    $response = $xmlGed->getProxy()->getPerson($query.'&maxResults=3', false);
    $xmlGed->parseXml($response);

    return $xmlGed->getMatches();
}
